{"version":3,"sources":["components/Wrapper/index.js","components/MemCard.js","components/Scoreboard.js","App.js","index.js"],"names":["Wrapper","props","className","children","MemCard","src","image","alt","id","onClick","cardClick","Scoreboard","gameState","score","App","state","chosen","cardOrder","cardShuffle","newOrder","i","ranNum","Math","floor","random","includes","push","setState","length","cards","this","map","mem","key","Component","ReactDOM","render","document","getElementById"],"mappings":"g6BAOeA,MAJf,SAAiBC,GACf,OAAO,yBAAKC,UAAU,WAAWD,EAAME,W,OCa1BC,G,KAdC,SAACH,GAChB,OACC,yBAAKC,UAAU,QACd,yBAAKA,UAAU,iBACd,yBAAKG,IAAKJ,EAAMK,MACfC,IAAKN,EAAMM,IACXC,GAAIP,EAAMO,GACVC,QAAS,kBAAMR,EAAMS,UAAUT,EAAMO,WCK3BG,EAZI,SAACV,GACnB,OACC,yBAAKC,UAAU,cACd,yBAAKA,UAAU,IAAf,WACUD,EAAMW,UACf,6BAFD,UAGSX,EAAMY,SC2DHC,E,2MA7DdC,MAAQ,CACPC,OAAQ,GACRH,MAAO,EACPI,UAAW,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAC5BL,UAAW,I,EAGZM,YAAc,WAEb,IADA,IAAMC,EAAU,GACPC,EAAI,EAAGA,EAAE,GAAG,CACpB,IAAIC,EAASC,KAAKC,MAAqB,EAAfD,KAAKE,UAC1BL,EAASM,SAASJ,KAEpBF,EAASO,KAAKL,GACdD,KAGF,EAAKO,SAAS,CAACV,UAAWE,K,EAG3BT,UAAY,SAACF,GACT,EAAKO,MAAMC,OAAOS,SAASjB,IAC7B,EAAKmB,SAAS,CAACX,OAAQ,KACvB,EAAKW,SAAS,CAACf,UAAW,0CAC1B,EAAKe,SAAS,CAACd,MAAO,MAGtB,EAAKc,SAAS,CAACf,UAAW,iBAC1B,EAAKG,MAAMC,OAAOU,KAAKlB,GACvB,EAAKmB,SAAS,CAACd,MAAO,EAAKE,MAAMC,OAAOY,UAET,IAA7B,EAAKb,MAAMC,OAAOY,SACpB,EAAKD,SAAS,CAACX,OAAQ,KACvB,EAAKW,SAAS,CAACf,UAAW,sDAC1B,EAAKe,SAAS,CAACd,MAAO,KAEvB,EAAKK,e,wEAGI,IAAD,OACJW,EAAQC,KAAKf,MAAME,UACvB,OACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CACCJ,MAAOiB,KAAKf,MAAMF,MAClBD,UAAWkB,KAAKf,MAAMH,YAItBiB,EAAME,IACN,SAACF,EAAOT,GAAR,OAAe,kBAAC,EAAD,iBACVY,EAAIH,GADM,CAEdI,IAAKb,EACLV,UAAW,EAAKA,oB,GAtDJwB,a,MCDlBC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.f3e61b1c.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst MemCard = (props) => {\r\n\treturn (\r\n\t\t<div className=\"card\">\r\n\t\t\t<div className=\"img-container\">\r\n\t\t\t\t<img src={props.image} \r\n\t\t\t\t\talt={props.alt}\r\n\t\t\t\t\tid={props.id}\r\n\t\t\t\t\tonClick={() => props.cardClick(props.id)}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default MemCard;\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst Scoreboard = (props) => {\r\n\treturn (\r\n\t\t<div className=\"scoreboard\">\r\n\t\t\t<div className=\"\">\r\n\t\t\t\tStatus: {props.gameState}\r\n\t\t\t\t<br/>\r\n\t\t\t\tScore: {props.score}\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Scoreboard;","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport mem from \"./mem.json\"\nimport MemCard from \"./components/MemCard\";\nimport Scoreboard from \"./components/Scoreboard\";\n\nclass App extends Component {\n\tstate = {\n\t\tchosen: [],\n\t\tscore: 0,\n\t\tcardOrder: [1,2,3,4,0,5,6,7,8],\n\t\tgameState: \"\"\n\t};\n\n\tcardShuffle = () =>{\n\t\tconst newOrder =[];\n\t\tfor (let i = 0; i<9;){\n\t\t\tlet ranNum = Math.floor(Math.random() *9)\n\t\t\tif(newOrder.includes(ranNum)){}\n\t\t\telse{\n\t\t\t\tnewOrder.push(ranNum);\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t\tthis.setState({cardOrder: newOrder})\n\t}\n\n\tcardClick = (id) =>{\n\t\tif(this.state.chosen.includes(id)){\n\t\t\tthis.setState({chosen: []});\n\t\t\tthis.setState({gameState: \"Already Clicked, You lose! Try Again?\"});\n\t\t\tthis.setState({score: 0});\n\t\t}\n\t\telse {\n\t\t\tthis.setState({gameState: \"Good Choice!\"});\n\t\t\tthis.state.chosen.push(id);\n\t\t\tthis.setState({score: this.state.chosen.length});\n\t\t}\n\t\tif(this.state.chosen.length === 9){\n\t\t\tthis.setState({chosen: []});\n\t\t\tthis.setState({gameState: \"Congratulations! You've got them all! Play Again?\"});\n\t\t\tthis.setState({score: 0});\n\t\t}\n\t\tthis.cardShuffle()\n\t}\n\n\trender() {\n\t\tlet cards = this.state.cardOrder\n\t\treturn (\n\t\t\t<Wrapper>\n\t\t\t\t<Scoreboard\n\t\t\t\t\tscore={this.state.score}\n\t\t\t\t\tgameState={this.state.gameState}\n\t\t\t\t/>\n\t\t\t\t\t\t\t\n\t\t\t\t{/* Ok, this function will map out cards in whatever order the cards array shows, based on index */}\n\t\t\t\t{cards.map(\n\t\t\t\t\t(cards, i) => (<MemCard \n\t\t\t\t\t\t{...mem[cards]} // Breaks out mem data for rendering each card\n\t\t\t\t\t\tkey={i} // Gives each card a react key i\n\t\t\t\t\t\tcardClick={this.cardClick} // This is where the click function gets passed in\n\t\t\t\t\t\t/>)\n\t\t\t\t)}\n\t\t\t</Wrapper>\n\t\t);\n\t}\n}\n\nexport default App;\n\n\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}